{"version":3,"sources":["assets/preloader.svg","common/Preloader.js","common/localStorageFunc.js","common/store.js","components/SearchVIN.js","components/PreviousRequests.js","components/Home.js","components/VehicleVariablesList.js","components/VehicleVariableItem.js","components/VehicleVariables.js","serviceWorker.js","index.js","App.js"],"names":["module","exports","styles","preloaderCenter","textAlign","zIndex","Preloader","style","preloaderCenterImg","src","preloader","alt","getAttributeAsArray","attribute","result","localStorage","getItem","JSON","parse","initialState","previous","reducer","state","action","type","value","savedVin","queue","length","shift","findIndex","x","merged","setItem","stringify","e","setAttribute","Context","React","createContext","SearchVIN","id","useParams","useState","vin","setVin","isLoading","setIsLoading","isAllowSubmit","setAllowSubmit","error","setError","response","setResponse","inputEl","useRef","dispatch","useContext","useEffect","current","fetchData","_url","a","fetch","res","json","console","Results","Message","className","onSubmit","preventDefault","name","placeholder","ref","onChange","fixedValue","_value","replace","slice","fixValue","handleChange","target","disabled","map","item","index","Value","key","Variable","PrevoiusRequests","store","to","Home","useReducer","Provider","VehicleVariablesList","props","match","useRouteMatch","message","results","ID","url","Name","dangerouslySetInnerHTML","__html","Description","VehicleVariableItem","resultItem","VehicleVariables","find","parseInt","Boolean","window","location","hostname","ReactDOM","render","path","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.5553cfe3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/preloader.68d0718f.svg\";","import React from 'react'\r\nimport preloader from '../assets/preloader.svg'\r\n\r\nconst styles = {\r\n    preloaderCenter: {\r\n        textAlign: \"center\",\r\n        zIndex: \"1\",\r\n    },\r\n\r\n}\r\n\r\nexport const Preloader = () =>\r\n    <div>\r\n        <img style={styles.preloaderCenterImg} src={preloader} alt=\"preloader\"/>\r\n    </div>","\r\nexport function getAttributeAsArray(attribute) {\r\n    const result =  localStorage.getItem(attribute);\r\n    if (result) {\r\n        return JSON.parse(result)\r\n    }\r\n    return result;\r\n}\r\n\r\n\r\nexport function setAttribute(attribute, value) {\r\n    try {\r\n        let savedVin = getAttributeAsArray(\"previous\");\r\n        if (savedVin) {\r\n            let queue = savedVin;\r\n            if(queue.length === 5) queue.shift();\r\n\r\n            if(savedVin.findIndex(x=>x===value) === -1){\r\n                const merged = [...queue, value];\r\n                localStorage.setItem(attribute, JSON.stringify(merged));\r\n            } \r\n           \r\n        } else {\r\n            localStorage.setItem(attribute, JSON.stringify([value]));\r\n        }\r\n    }\r\n    catch (e) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n\r\n","import React from \"react\";\r\nimport { getAttributeAsArray, setAttribute } from \"./localStorageFunc\";\r\n\r\nexport const initialState = { previous: getAttributeAsArray(\"previous\") };\r\n\r\nexport const reducer = (state, action) => {\r\n  switch (action.type) {\r\n   \r\n    case \"add\":\r\n      setAttribute(\"previous\", action.value);\r\n      return {\r\n        previous: getAttributeAsArray(\"previous\")\r\n      };\r\n   \r\n    case \"get\":\r\n      return {\r\n        previous: getAttributeAsArray(\"previous\")\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const Context = React.createContext();\r\n","import React, { useState, useEffect, useContext, useRef } from 'react'\r\nimport { Preloader } from '../common/Preloader';\r\nimport { useParams } from 'react-router-dom';\r\nimport { Context } from '../common/store';\r\nimport '../assets/styles.css'\r\n\r\nexport const SearchVIN = () => {\r\n    let { id } = useParams();\r\n\r\n    const [vin, setVin] = useState(\"\");\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [isAllowSubmit, setAllowSubmit] = useState(false);\r\n    const [error, setError] = useState(\"\");\r\n    const [response, setResponse] = useState({});\r\n    const inputEl = useRef(null);\r\n    const { dispatch } = useContext(Context);\r\n\r\n    //method of change and check string as VIN-code\r\n    const fixValue = (value) => {\r\n        let _value;\r\n        //regular expression checking for forbidden characters\r\n        _value = value.replace(/[^a-z0-9]/gi, '');\r\n\r\n        //check VIN length\r\n        let result = (_value.length > 17)\r\n            ? _value.slice(0, 16)\r\n            : _value;\r\n\r\n        return result;\r\n    }\r\n\r\n\r\n    const handleChange = (e) => {\r\n        const fixedValue = fixValue(e);\r\n        // allow to submit with the correct VIN length\r\n        setAllowSubmit(fixedValue.length === 17 ? true : false);\r\n\r\n        setVin(fixedValue);\r\n    }\r\n\r\n    //hook to update form input from previous requests\r\n    useEffect(() => {\r\n        if (id && id.length === 17) {\r\n            setAllowSubmit(true);\r\n            setResponse({});\r\n            inputEl.current.value = id;\r\n            setVin(id);\r\n            fetchData(`https://vpic.nhtsa.dot.gov/api/vehicles/decodevin/${id}?format=json`);\r\n        }\r\n\r\n    }, [id]);\r\n\r\n    //form submit\r\n    const submitVIN = e => {\r\n        e && e.preventDefault();\r\n        fetchData(`https://vpic.nhtsa.dot.gov/api/vehicles/decodevin/${vin}?format=json`);\r\n\r\n        //update store\r\n        dispatch({ type: \"add\", value: vin });\r\n\r\n    };\r\n\r\n    const fetchData = async (_url) => {\r\n        try {\r\n            if (isLoading) return;\r\n            setIsLoading(true);\r\n            const res = await fetch(_url);\r\n            const json = await res.json();\r\n            setResponse(json);\r\n        } catch (error) {\r\n            setError(error);\r\n            console.error(error);\r\n        }\r\n        setIsLoading(false);\r\n    };\r\n\r\n\r\n    const {\r\n        Results,\r\n        Message\r\n    } = response;\r\n\r\n    return (\r\n        <section className=\"search-vin\">\r\n\r\n            <h2>VIN decoder</h2>\r\n            <form className=\"submit-form\" onSubmit={submitVIN}>\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"vin\"\r\n                    className=\"submit-form__input\"\r\n                    placeholder=\"enter VIN-code\"\r\n                    value={vin}\r\n                    ref={inputEl}\r\n                    onChange={(e) => handleChange(e.target.value)}\r\n                />\r\n                <button className=\"submit-form__button\" disabled={isLoading || !isAllowSubmit}>Submit</button>\r\n            </form>\r\n\r\n            {Message && <h3>{Message}</h3>}\r\n            {error && <h3>{error}</h3>}\r\n            {isLoading && <Preloader />}\r\n\r\n            {Results && Results.length > 0 &&\r\n                <table className=\"search-vin__table\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Argument</th>\r\n                            <th>Value</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {Results.map((item, index) =>\r\n                            item.Value\r\n                                ?\r\n                                //used `index` because item.VariableId not unique in array\r\n                                <tr key={index}>\r\n                                    <td>{item.Variable}</td>\r\n                                    <td>{item.Value}</td>\r\n                                </tr>\r\n                                :\r\n                                null\r\n                        )}\r\n                    </tbody>\r\n                </table>\r\n            }\r\n        </section>\r\n    )\r\n}","import React, { useEffect, useContext } from 'react'\r\nimport { Context } from '../common/store';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport const PrevoiusRequests = () => {\r\n    const { store, dispatch } = useContext(Context);\r\n\r\n    useEffect(() => {\r\n        dispatch({ type: \"get\" });\r\n    }, [])\r\n\r\n    return (\r\n        <section className=\"prevoius-requests\">\r\n            {store.previous &&\r\n                <>\r\n                    <h2>Prevoius VIN requests</h2>\r\n\r\n                    {store.previous.map((item, index) =>\r\n                        <div key={index}>\r\n                            <Link to={`/${item}`} className=\"prevoius-requests__link\">{item}</Link>\r\n                        </div>\r\n                    )}\r\n                </>\r\n            }\r\n        </section>\r\n    )\r\n}","import React, { useReducer } from 'react'\r\nimport { SearchVIN } from './SearchVIN'\r\nimport { PrevoiusRequests } from './PreviousRequests'\r\nimport { Context, reducer, initialState } from '../common/store'\r\n\r\nexport const Home = () => {\r\n    const [store, dispatch] = useReducer(reducer, initialState);\r\n\r\n    return (\r\n        <article>\r\n            <Context.Provider value={{ store, dispatch }}>\r\n                {/* list previous 5 VIN requests*/}\r\n                <PrevoiusRequests />\r\n                <hr/>\r\n                {/* search VIN params form  */}\r\n                <SearchVIN />\r\n            </Context.Provider >\r\n        </article>\r\n    )\r\n}","import React from 'react'\r\nimport { Link, useRouteMatch } from \"react-router-dom\";\r\n\r\nexport const VehicleVariablesList = (props) => {\r\n    let match = useRouteMatch();\r\n    \r\n    const {\r\n        message,\r\n        results,\r\n    } = props;\r\n\r\n    return (\r\n        <section className=\"vehicle-variables-list\">\r\n            <h2>Vehicle variables</h2>\r\n            {message && <h3>{message}</h3>}\r\n\r\n            {results && results.length > 0\r\n                &&\r\n                <table className=\"vehicle-variables-list__table\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Argument</th>\r\n                            <th>Value</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {results.map(item =>\r\n                            <tr key={item.ID}>\r\n                                <td><Link to={`${match.url}/${item.ID}`} >{item.Name}</Link></td>\r\n                                <td><div dangerouslySetInnerHTML={{ __html: item.Description }} /></td>\r\n                            </tr>\r\n                        )}\r\n                    </tbody>\r\n                </table>\r\n            }\r\n        </section>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport const VehicleVariableItem = (props) => {\r\n\r\n    const {\r\n        resultItem,\r\n        message,\r\n        id\r\n    } = props;\r\n\r\n    return (\r\n        <section className=\"vehicle-variable-item\">\r\n            <h2>Vehicle variable description</h2>\r\n            {message && resultItem && <h3>{message}</h3>}\r\n            <div className=\"vehicle-variable-item__resultItem\">\r\n                {resultItem\r\n                    ? <>\r\n                        {resultItem && resultItem.Name && <h3>Name: {resultItem.Name}</h3>}\r\n                        <div dangerouslySetInnerHTML={{ __html: resultItem.Description }} />\r\n                    </>\r\n                    : message && <h3>Vehicle variable `{id}` incorrect</h3>\r\n                }\r\n            </div>\r\n        </section>\r\n    )\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { Preloader } from '../common/Preloader';\r\nimport { VehicleVariablesList } from './VehicleVariablesList';\r\nimport { VehicleVariableItem } from './VehicleVariableItem';\r\n\r\nexport const VehicleVariables = () => {\r\n    let { id } = useParams();\r\n\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [response, setResponse] = useState({});\r\n    const [error, setError] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        setIsLoading(true)\r\n\r\n        try {\r\n            async function fetchData() {\r\n                const result = await fetch('https://vpic.nhtsa.dot.gov/api/vehicles/getvehiclevariablelist?format=json');\r\n                const json = await result.json();\r\n                setResponse(json);\r\n                setIsLoading(false);\r\n            }\r\n            fetchData();\r\n        } catch (error) {\r\n            setError(error);\r\n            console.error(error);\r\n        }\r\n\r\n    }, [])\r\n\r\n    const {\r\n        Message,\r\n        Results\r\n    } = response;\r\n\r\n    //get element if param \"id\" is used\r\n    const resultItem = Results && Results.find(item => item.ID === parseInt(id));\r\n\r\n    return (\r\n        <section className=\"vehicle-variables\">\r\n            {id\r\n                ?\r\n                <VehicleVariableItem\r\n                    message={Message}\r\n                    resultItem={resultItem}\r\n                    id={id}\r\n                />\r\n                :\r\n                <VehicleVariablesList\r\n                    message={Message}\r\n                    results={Results}\r\n                />\r\n            }\r\n            {isLoading && <Preloader />}\r\n            {error && <h3>{error}</h3>}\r\n\r\n        </section>\r\n    )\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>, \n    document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link\n} from \"react-router-dom\";\nimport { Home } from './components/Home';\nimport { VehicleVariables } from './components/VehicleVariables';\n\nexport default function App() {\n    return (\n        <Router>\n            <nav>\n                <ul>\n                    <li>\n                        <Link to=\"/\">VIN decoder</Link>\n                    </li>\n                    <li>\n                        <Link to=\"/variables\">Vehicle variables</Link>\n                    </li>\n                </ul>\n            </nav>\n            <Switch>\n                <Route path=\"/variables/:id?\" component={VehicleVariables} />\n                <Route path=\"/:id?\" component={Home} />\n            </Switch>\n        </Router>\n    );\n}\n\n"],"sourceRoot":""}